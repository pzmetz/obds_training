# Converting your CRISPR library excel file to a csv file:
    # on a mac, conversion of excel files to csv files happens with CR (Carriage return; https://leemendelowitz.github.io/blog/remove-carriage-return-control-character.html).
    # You can convert your mac.csv to unix.csv by using this code in the command line: tr '\r' '\n' < DC_Metrorail_Ridership.mac.csv > DC_Metrorail_Ridership.unix.csv
    # now things like head will work, so you can check the file.

#FUNCTION OF THIS SCRIPT:
    # This script processes fastq files that were generated by sequencing a PCR amplicon covering a 41bp region that contains the 1st gRNA of Humagne C or Humagne D CRISPR libraries.
    # This is necessary because the reads from the Humagne C and Humagne D amplicon were pooled on the illumina flowcell with the same index, so we have to separate them based on gRNA sequence.
    # That is what this script does. We take the fastq file, check each line, see if it contains the gRNA from the Humagne C and D reference database, and if it does contain a gRNA from C it
    # puts it in a file with reads called Humagne_C.fastq and if it contains a gRNA from D it puts it in a file with reads called Humagne_D.fastq
    # You will need to provide the CRISPR libraries as csv files.

# Converting your CRISPR library excel file to a csv file:
    # on a mac, conversion of excel files to csv files happens with CR (Carriage return; https://leemendelowitz.github.io/blog/remove-carriage-return-control-character.html).
    # You can convert your mac.csv to unix.csv by using this code in the command line: tr '\r' '\n' < DC_Metrorail_Ridership.mac.csv > DC_Metrorail_Ridership.unix.csv
    # now things like head will work, so you can check the file.

# To run this script, you need to ssh onto the cluster using a terminal, move to the folder that contains this script, module load python and then run the script from there from the terminal.
# Otherwise, the script will not find the right files, because atom runs it from a different place if you run it by clicking the play button above.

# Here you fill in the path of the fastq file you want to check for Humagne C or D guides

# import pysam package, make sure to have pysam installed in when you run the script from the command line
import pysam

fastq_file_path = "/dunnstore/hassan/paul/HumagneC.D_validation/Fastq_files/test_fastq_files/250_reads.fastq"

# function named 'Determine_C_or_D_gRNAs' of variable defined above
def Determine_C_or_D_gRNAs(fastq_file_path):
    with open("/dunnstore/hassan/paul/HumagneC.D_validation/Fastq_files/test_reads_Humagne_C.fastq","a") as C:
        with open("/dunnstore/hassan/paul/HumagneC.D_validation/Fastq_files/test_reads_Humagne_D.fastq","a") as D:
            with pysam.FastxFile(fastq_file_path) as fastq_inputfile:
                # iterate over 'entries in fastq' - entry object = 4 lines for each read
                for entry in fastq_inputfile:
                    for gRNA_sequence_Humagne_C in open("Humagne_C.csv"):
                        # check if it matches your string
                        # if matches C write to file c
                        if entry.sequence[18:43] in gRNA_sequence_Humagne_C:
                            # write entry to C file
                            C.write(str(entry))
                            C.write("\n")

    # end of script
    return

# run script for the variable defined earlier
Determine_C_or_D_gRNAs(fastq_file_path)
