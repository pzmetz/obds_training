# Converting your CRISPR library excel file to a csv file:
    # on a mac, conversion of excel files to csv files happens with CR (Carriage return; https://leemendelowitz.github.io/blog/remove-carriage-return-control-character.html).
    # You can convert your mac.csv to unix.csv by using this code in the command line: tr '\r' '\n' < DC_Metrorail_Ridership.mac.csv > DC_Metrorail_Ridership.unix.csv
    # now things like head will work, so you can check the file.

#FUNCTION OF THIS SCRIPT:
    # This script processes fastq files that were generated by sequencing a PCR amplicon covering a 41bp region that contains the 1st gRNA of Humagne C or Humagne D CRISPR libraries.
    # This is necessary because the reads from the Humagne C and Humagne D amplicon were pooled on the illumina flowcell with the same index, so we have to separate them based on gRNA sequence.
    # That is what this script does. We take the fastq file, check each line, see if it contains the gRNA from the Humagne C and D reference database, and if it does contain a gRNA from C it
    # puts it in a file with reads called Humagne_C.fastq and if it contains a gRNA from D it puts it in a file with reads called Humagne_D.fastq
    # You will need to provide the CRISPR libraries as csv files.

# Converting your CRISPR library excel file to a csv file:
    # on a mac, conversion of excel files to csv files happens with CR (Carriage return; https://leemendelowitz.github.io/blog/remove-carriage-return-control-character.html).
    # You can convert your mac.csv to unix.csv by using this code in the command line: tr '\r' '\n' < DC_Metrorail_Ridership.mac.csv > DC_Metrorail_Ridership.unix.csv
    # now things like head will work, so you can check the file.

# To run this script, you need to ssh onto the cluster using a terminal, move to the folder that contains this script, module load python and then run the script from there from the terminal.
# Otherwise, the script will not find the right files, because atom runs it from a different place if you run it by clicking the play button above.

# Here you fill in the path of the fastq file you want to check for Humagne C or D guides
fastq_file_path = "/dunnstore/hassan/paul/HumagneC.D_validation/Fastq_files/test_fastq_files/250_reads.fastq"

# function named 'Determine_C_or_D_gRNAs' of variable defined above
def Determine_C_or_D_gRNAs(fastq_file_path):
    # open the file you inputted as c_or_d to read it ('r')
    with open(fastq_file_path, 'r') as c_or_d:
        # itterate over lines in the reference database and do something for each gRNA:
        for gRNA_sequence_Humagne_C in open("Humagne_C.csv"):
            # start a count, at -1 so the first count/starting position will be 0.
            count = -1
            # for each gRNA you itterate over each line in the data file
            for line in c_or_d.readlines():
                # add 1 to the count
                count = count + 1
                # if the sequence of the gRNA from Humagne C is present in one of the lines of the data file
                # which, if that is the case, is always going to be the second of each 4 lines (as this contains the read in fastq file format),
                # you put the line of the read (count), the line before (count -1) and the two lines
                # after (count +1 and count +2) into a list for Humagne C, called c_fastq, using append
                if gRNA_sequence_Humagne_C in line:
                    with open("/dunnstore/hassan/paul/HumagneC.D_validation/Fastq_files/test_reads_Humagne_C.fastq","a") as C:
                        C.write(c_or_d.readlines()[count - 1])
                        C.write(c_or_d.readlines()[count])
                        C.write(c_or_d.readlines()[count + 1])
                        C.write(c_or_d.readlines()[count + 2])
        # same thing as for Humagne C, but now for Humagne D. So you go over the same file and determine if it
        # contains a gRNA from Humagne D and appends it to a list for Humagne D, called d_fastq.
        for gRNA_sequence_Humagne_D in open("Humagne_D.csv"):
            count = -1
            for line in c_or_d.readlines():
                count = count + 1
                if gRNA_sequence_Humagne_D in line:
                    with open("/dunnstore/hassan/paul/HumagneC.D_validation/Fastq_files/test_reads_Humagne_D.fastq","a") as D:
                        D.write(c_or_d.readlines()[count - 1])
                        D.write(c_or_d.readlines()[count])
                        D.write(c_or_d.readlines()[count + 1])
                        D.write(c_or_d.readlines()[count + 2])
    # end of script
    return

# run script for the variable defined earlier
Determine_C_or_D_gRNAs(fastq_file_path)
